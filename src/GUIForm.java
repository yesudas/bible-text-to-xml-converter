
import java.io.BufferedReader;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;

/*
 * GUIForm.java
 *
 * Created on February 6, 2009, 5:29 PM
 */
import javax.swing.JOptionPane;



/**
 *
 * @author  Yesudas.S
 */
public class GUIForm extends javax.swing.JFrame {
    
    /** Creates new form GUIForm */
    public GUIForm() {
        initComponents();
        fc = new JFileChooser();

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WOGs Txt 2 XML Converter");
        setResizable(false);

        jButton1.setText("Select Source File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);

        jButton2.setText("Save As");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);

        jButton3.setText("Convert To XML");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Step 1: Select the source txt file");

        jLabel2.setText("Step 2: Give the file name with extension to save");

        jLabel3.setText("Step 3: Click on Convert To XML button to convert");

        jLabel4.setText("Note: The format of the source txt file should be,");

        jLabel5.setText("BookNo<tab space>ChapterNo<tab space>VerseNo<tab space>Verse");

        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel2)
                            .add(jLabel3)
                            .add(jLabel4)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jTextField2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jButton1)))))
                    .add(layout.createSequentialGroup()
                        .add(79, 79, 79)
                        .add(jButton3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5)
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton3)
                    .add(jButton4))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                inputFile = fc.getSelectedFile();
                jTextField1.setText(inputFile.getAbsolutePath());
                //This is where a real application would open the file.
                System.out.println("Opening: " + inputFile.getName() + ".");
            } else {
                System.out.println("Open command cancelled by user.");
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int returnVal = fc.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                outputFile = fc.getSelectedFile();
                jTextField2.setText(outputFile.getAbsolutePath());
                System.out.println("Saving: " + outputFile.getName() + "." );
            } else {
                System.out.println("Save command cancelled by user.");
            }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(inputFile == null)
            JOptionPane.showMessageDialog(this, "Please select source file");
        else if(outputFile == null)
            JOptionPane.showMessageDialog(this, "Please give file name to save");
        BufferedReader inputFileReader =  null;
		try {
			//inputFileReader =  new BufferedReader(new FileReader(inputFileName));
			inputFileReader = new BufferedReader(new InputStreamReader(new FileInputStream(inputFile),"UTF8"));
		} catch (FileNotFoundException e) {
			//e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "The file: " + inputFile.getAbsolutePath() + "is missing.");
		} catch (UnsupportedEncodingException e) {
			//e.printStackTrace();
			JOptionPane.showMessageDialog(this, "Exception Occured: " + e.getMessage());
		}

		BufferedWriter outputFileWriter = null;
		try {
			outputFileWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile),"UTF8"));
		} catch (IOException e) {
			//e.printStackTrace();
			JOptionPane.showMessageDialog(this, "Exception Occured: " + e.getMessage());
		}
		
	    try {
	    	String line = null;
	    	StringTokenizer stringTokenizer = null; 
	    	while (( line = inputFileReader.readLine()) != null){ 
	    		stringTokenizer = new StringTokenizer(line, "\t"); 
				String bookNo = stringTokenizer.nextToken();
				String chapterNo = stringTokenizer.nextToken();
				String verseNo = stringTokenizer.nextToken();
				String verse = stringTokenizer.nextToken();
				try {
					outputFileWriter.write("<v b='" + bookNo + "' c='" + chapterNo + "' v='" + verseNo + "'>\n");
					verse = replace(verse, "&", "&amp;");
                                        verse = replace(verse, "<", "&lt;");
                                        verse = replace(verse, ">", "&gt;");
                                        verse = replace(verse, "\"", "&quot;");
                                        verse = replace(verse, "'", "&#39;");
                                        outputFileWriter.write("<![CDATA[" + verse + "]]>\n");
					outputFileWriter.write("</v>\n");
					} catch (IOException e) {
						//e.printStackTrace();
						JOptionPane.showMessageDialog(this, "IOException occured: " + e.getMessage());
				}
			}
                JOptionPane.showMessageDialog(this, "Text file to XML file convertion is completed successfully");
	      } catch (IOException e) {
				//e.printStackTrace();
				JOptionPane.showMessageDialog(this, "IOException occured: " + e.getMessage());
	      }finally {
	    	  try {
				inputFileReader.close();
			} catch (IOException e) {
				//e.printStackTrace();
				JOptionPane.showMessageDialog(this, "IOException occured: " + e.getMessage());
			}
	    	try {
				outputFileWriter.close();
			} catch (IOException e) {
				//e.printStackTrace();
				JOptionPane.showMessageDialog(this, "IOException occured: " + e.getMessage());
			}
	    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIForm().setVisible(true);
            }
        });
    }
    
    public static String replace (String target, String from, String to) {   
      //   target is the original string
      //   from   is the string to be replaced
      //   to     is the string which will used to replace
      //  returns a new String!
      int start = target.indexOf(from);
      if (start == -1) return target;
      int lf = from.length();
      char [] targetChars = target.toCharArray();
      StringBuffer buffer = new StringBuffer();
      int copyFrom = 0;
      while (start != -1) {
        buffer.append (targetChars, copyFrom, start-copyFrom);
        buffer.append (to);
        copyFrom = start + lf;
        start = target.indexOf (from, copyFrom);
        }
      buffer.append (targetChars, copyFrom, targetChars.length - copyFrom);
      return buffer.toString();
  }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
    private JFileChooser fc;
    private File inputFile;
    private File outputFile;
}
